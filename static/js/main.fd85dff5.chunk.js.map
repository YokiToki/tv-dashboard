{"version":3,"sources":["../../tv-dashboard/src/assets/forkplayer.svg","../../tv-dashboard/src/components/Form/index.js","../../tv-dashboard/src/components/Apps/index.js","../../tv-dashboard/src/components/Container/index.js","../../tv-dashboard/src/App.js","../../tv-dashboard/src/serviceWorker.js","../../tv-dashboard/src/index.js"],"names":["module","exports","__webpack_require__","p","FocusableTextField","withFocusable","_ref","setFocus","react_default","a","createElement","core","inputProps","contenteditable","label","style","margin","placeholder","helperText","fullWidth","InputLabelProps","shrink","FocusableButton","_ref2","href","variant","size","color","Index","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","url","handleChangeURL","bind","assertThisInitialized","e","setState","target","value","_this2","focusPath","onChange","onEnterPress","handleOpenURL","React","Component","src","ForkPlayerImg","alt","component","Apps_FocusableButton","Container","document","location","console","log","message","className","Form","Apps","NavigableApp","withNavigation","components_Container","Boolean","window","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fd85dff5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/forkplayer.85212ff6.svg\";","import {Button, TextField} from \"@material-ui/core/index\";\nimport React from \"react\";\nimport {withFocusable} from 'react-tv-navigation'\n\n\nconst FTextField = ({setFocus}) => {\n  return (\n    <TextField\n      inputProps={{'contenteditable': true}}\n      label=\"URL\"\n      style={{margin: 8}}\n      placeholder=\"http://\"\n      helperText=\"Enter URL to load\"\n      fullWidth\n      margin=\"normal\"\n      InputLabelProps={{\n        shrink: true,\n      }}/>\n  );\n};\n\nconst FButton = ({setFocus}) => {\n  return (\n    <Button\n      href=\"#\"\n      variant=\"contained\"\n      size=\"large\"\n      color=\"primary\"\n    >\n      Open URL\n    </Button>\n  )\n};\n\nconst FocusableTextField = withFocusable(FTextField);\nconst FocusableButton = withFocusable(FButton);\n\nclass Index extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      url: null,\n    };\n    this.handleChangeURL = this.handleChangeURL.bind(this);\n  }\n\n  handleChangeURL(e) {\n    this.setState({'url': e.target.value})\n  }\n\n  render() {\n    return (<form>\n      <FocusableTextField\n        focusPath='item-input'\n        value={this.state.url}\n        onChange={this.props.handleChangeURL}\n      />\n      <FocusableButton\n        focusPath='button'\n        onEnterPress={() => this.props.handleOpenURL(this.state.url)}/>\n    </form>);\n  }\n}\n\nexport default Index;","import {Box, Button, Typography} from \"@material-ui/core/index\";\nimport React from \"react\";\nimport {withFocusable} from 'react-tv-navigation';\nimport ForkPlayerImg from \"../../assets/forkplayer.svg\";\n\nconst FButton = ({setFocus}) => {\n  return (\n    <Button\n      href=\"#\"\n      variant=\"contained\"\n      size=\"large\"\n      color=\"primary\"\n    >\n      <div>\n        <img src={ForkPlayerImg} alt=\"ForkPlayer\"/>\n      </div>\n      <div>ForkPlayer</div>\n    </Button>\n  )\n};\n\nconst FocusableButton = withFocusable(FButton);\n\nclass Index extends React.Component {\n\n  render() {\n    return (<Box>\n      <Typography variant=\"h5\" component=\"h2\">Applications</Typography>\n\n      <FocusableButton\n        focusPath='button-forkPlayer'\n        onEnterPress={() => this.props.handleOpenURL('http://operatv.obovse.ru/2.5/')}\n      />\n    </Box>);\n  }\n}\n\nexport default Index;","import React from \"react\";\nimport Form from \"../Form\";\nimport Apps from \"../Apps\";\n\nclass Container extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleOpenURL = this.handleOpenURL.bind(this);\n  }\n\n  handleOpenURL(url) {\n    try {\n      document.location.href = url;\n    } catch (e) {\n      console.log(e.message);\n    }\n  }\n\n  render() {\n    return (<main>\n      <div className=\"container\">\n        <Form handleOpenURL={this.handleOpenURL}/>\n        <hr/>\n        <Apps handleOpenURL={this.handleOpenURL}/>\n      </div>\n    </main>);\n  }\n}\n\nexport default Container;","import React from 'react';\nimport Container from './components/Container';\nimport {withNavigation} from 'react-tv-navigation'\n\nfunction App() {\n  return (\n    <Container/>\n  );\n}\n\nconst NavigableApp = withNavigation(App);\n\nexport default NavigableApp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}